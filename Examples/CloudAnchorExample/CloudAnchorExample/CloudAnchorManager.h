/*
 * Copyright 2019 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <ARKit/ARKit.h>
#import <SceneKit/SceneKit.h>

@class CloudAnchorManager;
@class GARAnchor;
@class GARFrame;
@class GARSession;
@protocol GARSessionDelegate;

NS_ASSUME_NONNULL_BEGIN

/**
 * Delegate for receiving callbacks from a CloudAnchorManager and the underlying GARSession. All
 * methods are optional.
 */
@protocol CloudAnchorManagerDelegate <GARSessionDelegate>

/**
 * Invoked after the ARSessionDelegate:session:didUpdateFrame: method was called on the
 * CloudAnchorManager, updated with the GARFrame generated by GARSession#update:error:
 *
 * @param manager  The CloudAnchorManager which received the selector.
 * @param garFrame The GARFrame object generated by GARSession using the ARFrame.
 * @param error The error information.
 */
- (void)cloudAnchorManager:(CloudAnchorManager *)manager
            didUpdateFrame:(GARFrame *)garFrame
                     error:(NSError *)error;

/**
 * Invoked after a call to CloudAnchorManager#createRoom was successful.
 *
 * @param manager  The CloudAnchorManager which received CloudAnchorManager#createRoom.
 * @param roomCode The code for the room which was created.
 */
- (void)cloudAnchorManager:(CloudAnchorManager *)manager createdRoom:(NSString *)roomCode;

/**
 * Invoked after a call to CloudAnchorManager:createRoom failed.
 *
 * @param manager The CloudAnchorManager which received CloudAnchorManager#createRoom.
 * @param error   An NSError with information about what failed.
 */
- (void)cloudAnchorManager:(CloudAnchorManager *)manager
    failedToCreateRoomWithError:(NSError *)error;

/**
 * Invoked after a call to GARSession:resolveCloudAnchorWithIdentifier failed.
 *
 * @param manager The CloudAnchorManager which received CloudAnchorManager#createRoom.
 * @param error   An NSError with information about what failed.
 */
- (void)cloudAnchorManager:(CloudAnchorManager *)manager
    resolveCloudAnchorReturnNilWithError:(NSError *)error;

@end

@interface CloudAnchorManager : NSObject <ARSessionDelegate>

@property (nonatomic, weak, setter=setDelegate:) id<CloudAnchorManagerDelegate> delegate;

- (instancetype)initWithARSceneView:(ARSCNView *)scnView;

/**
 * Attempt to create a room with an unused room code. Results in either
 * cloudAnchorManager:createdRoom or cloudAnchorManager:failedToCreateRoomWithError: being called.
 */
- (void)createRoom;

/**
 * Store the cloud anchor identifier corresponding to the passed GARAnchor in firebase under the
 * passed room code.
 *
 * @param roomCode A room code used to store information about cloud anchors in firebase.
 * @param anchor   The anchor to be mapped to the given room code in firebase.
 */
- (void)updateRoom:(NSString *)roomCode withAnchor:(GARAnchor *)anchor;

/**
 * Attempt to resolve the last hosted anchor for the given room code. If there is a cloud anchor
 * id for the room code, the completion block will be called with a stub while the cloud anchor is
 * resolved.
 *
 * @param roomCode   A room code used to store information about cloud anchors in firebase.
 * @param completion Callback to invoke if the room has an anchor associated with it and a resolve
 *                   attempt is in progress.
 */
- (void)resolveAnchorWithRoomCode:(NSString *)roomCode completion:(void (^)(GARAnchor *))completion;

/**
 * Stop observing firebase messages related to the given room code.
 *
 * @param roomCode A room code used to store information about cloud anchors in firebase.
 */
- (void)stopResolvingAnchorWithRoomCode:(NSString *)roomCode;

/**
 * Host a Cloud Anchor corresponding to the given ARAnchor.
 *
 * @param arAnchor An ARAnchor object to be hosted within the hotspot generated by the session.
 * @param error    A return address which an error will be written to, if one occurs.
 *
 * @return The new GARAnchor, or `nil` if there is an error.
 */
- (GARAnchor *)hostCloudAnchor:(ARAnchor *)arAnchor error:(NSError **)error;


/**
 * Remove the passed GARAnchor from the underlying GARSession
 *
 * @param anchor A GARAnchor object to be removed.
 */
- (void)removeAnchor:(GARAnchor *)anchor;

@end

NS_ASSUME_NONNULL_END
