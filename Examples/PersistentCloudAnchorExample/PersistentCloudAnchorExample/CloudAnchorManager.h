/*
 * Copyright 2020 Google LLC. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#import <ARKit/ARKit.h>
#import <SceneKit/SceneKit.h>

@class CloudAnchorManager;
@class GARAnchor;
@class GARFrame;
@class GARSession;
@protocol GARSessionDelegate;

NS_ASSUME_NONNULL_BEGIN

/**
 * Delegate for receiving callbacks from a CloudAnchorManager and the underlying GARSession. All
 * methods are optional.
 */
@protocol CloudAnchorManagerDelegate <GARSessionDelegate>
@required

/**
 * Invoked after the ARSessionDelegate#session:didUpdateFrame: method was called on the
 * CloudAnchorManager, updated with the GARFrame generated by GARSession#update:error:
 *
 * @param manager  The CloudAnchorManager which received the selector.
 * @param garFrame The GARFrame object generated by GARSession using the ARFrame.
 * @param tracking Whether the camera is tracking.
 * @param cameraTransform The camera to world transform.
 * @param anchors The local anchors in session.
 * @param featureMapQuality The feature map quality value.
 */
- (void)cloudAnchorManager:(CloudAnchorManager *)manager
            didUpdateFrame:(GARFrame *)garFrame
                  tracking:(BOOL)tracking
           cameraTransform:(simd_float4x4)cameraTransform
                   anchors:(NSArray<ARAnchor *> *)anchors
         featureMapQuality:(int)featureMapQuality;

@end

/**
 * Helper class for asynchronously invoking optional ARSessionDelegate methods.
 */
@interface CloudAnchorManager : NSObject <ARSessionDelegate>

@property(nonatomic, weak, setter=setDelegate:) id<CloudAnchorManagerDelegate> delegate;

/**
 * Initialize an instance of CloudAnchorManager.
 *
 * @param session The session that the view uses to update the scene.
 */
- (instancetype)initWithARSession:(ARSession *)session;

/**
 * Host a Cloud Anchor corresponding to the given ARAnchor.
 *
 * @param arAnchor An ARAnchor object to be hosted within the hotspot generated by the session.
 * @param error    A return address which an error will be written to, if one occurs.
 *
 * @return The new GARAnchor, or `nil` if there is an error.
 */
- (GARAnchor *)hostCloudAnchor:(ARAnchor *)arAnchor error:(NSError **)error;

/**
 * Attempt to resolve the last hosted anchor for the given anchor ids. If there is a cloud anchor
 * id for the room code, the completion block will be called with a stub while the cloud anchor is
 * resolved.
 *
 * @param anchorId  Anchor cloud identifier.
 * @param error     A return address which an error will be written to, if one occurs.
 *
 * @return The new GARAnchor, or `nil` if there is an error.
 */
- (GARAnchor *)resolveAnchorWithAnchorId:(NSString *)anchorId error:(NSError **)error;

/**
 * Remove the passed GARAnchor from the underlying GARSession
 *
 * @param anchor A GARAnchor object to be removed.
 */
- (void)removeAnchor:(GARAnchor *)anchor;

/**
 * Get the feature map quality value from ARFrame.
 *
 * @frame The current camera ARFrame.
 */
- (int)getFeatureMapQuality:(ARFrame *)frame;

@end

NS_ASSUME_NONNULL_END
